#version 330 core

in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace; // shading
           

uniform sampler2D shadowMapSampler;
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
uniform sampler2D ambientColorSampler;
uniform sampler2D normals_from_texture;
uniform int useTexture = 0;
uniform mat4 V;
//plane rendering
uniform int plane = 0;
uniform sampler2D pathColorSampler;
uniform sampler2D grassColorSampler;
// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;
//uniform Light light = Light(
//    vec4( 1, 1, 1, 1 ),
//    vec4( 1, 1, 1, 1 ),
//    vec4( 1, 1, 1, 1 ),
//    vec3( 10, 5, 10 ),
//    50.0f
//
//);

// materials
struct Material {
    vec4 Ka; 
    vec4 Kd;
    vec4 Ks;
    float Ns; 
};
uniform Material mtl;

out vec4 fragmentColor;

void phong(float visibility);
float ShadowCalculation(vec4 fragPositionLightspace);

 
    
void main(){

        fragmentColor = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
//    if (useTexture!=2){
//        float shadow  = ShadowCalculation(vertex_position_lightspace);
//    
//        float visibility = 1.0f - shadow;
//        phong(visibility);
//        }
//    else{
//        if(vertex_position_worldspace.y < 0.01f){
//        //if(vertex_UV.x < 0.1f){
//            //fragmentColor = vec4(0, 1, 0, 1.0);
//            fragmentColor = vec4(texture(pathColorSampler, vertex_UV).rgb, 1.0);
//            }
////        else if(vertex_position_worldspace.y < 1.0f){
////            fragmentColor = vec4(0,0, 1, 1.0);
////        }
//        else{
//            //fragmentColor = vec4(1,0, 0, 1.0);
//            fragmentColor = vec4(texture(grassColorSampler, vertex_UV).rgb, 1.0);
//        }
//        //fragmentColor = vec4(0, vertex_UV.y, 0, 1);
//    }



}



float ShadowCalculation(vec4 vertexPositionLightspace){


    // Given the position of a fragment in lightspace coordinates
    // We sample the depth buffer to see whether or not the fragment is shadowed
    
    float shadow;

    // Task 4.3
    //
    // Perspective devide to bring coordinates in range[-1, 1]
    vec3 projCoords = vertexPositionLightspace.xyz / vertexPositionLightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    // Sampling the closest point in this position from the depth map
    // REMINDER: Since we are in lightspace coordinates,
    //           the z parameter is the depth from the camera
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;
    
    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

    // If the currentDepth is larger than the closestDepth, the fragment is shadowed
    shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    //

    // Task 4.4
    // Correcting the quantization problem
    //vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float bias = 0.0005;
    //float bias = max(0.05 * (1.0 - dot(normalize(vertex_normal_cameraspace), L)), 0.005); 
    shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
        

    // Task 4.7 Make the shadow edges more realistic
    //*/
    shadow = 0.0;
    vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    vec2 texelSize = 1.0 / depthMap_dimensions;
    for(int x = -1; x <= 1; x++ ){
        for(int y = -1; y <= 1; y++ ){
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
        }
    }
    shadow /= 20.0;//12.0;//9.0;
    //*/


    // Task 4.5
    
    if(projCoords.z > 1.0)
        shadow = 0.0;
    //*/


    return shadow;

}



void phong(float visibility) {
   
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;

    // use texture for materials
    if (useTexture == 0 ) {//orc, mage tower
        //_Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1.0);
        _Ks = vec4(0.1, 0.1, 0.1, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        //_Kd =vec4(1.0, 1.0, 1.0, 1.0);
        _Ka = vec4(texture(ambientColorSampler, vertex_UV).rgb, 1.0)*_Kd;
        //_Ka = _Kd;
        //_Ka = vec4(0.2, 0.2, 0.2, 0.2);
        //_Ka = vec4(1.0, 1.0, 1.0, 1.0);
        _Ns = 225;
    }
    else if (useTexture == 1){//plane 
        _Ks = vec4(0.2, 0.2, 0.2, 0.5);
        if(vertex_position_worldspace.y < 0.03f){
            _Kd = vec4(texture(pathColorSampler, vertex_UV).rgb, 1.0);
            }
        else{
            _Kd = vec4(texture(grassColorSampler, vertex_UV).rgb, 1.0);
        }
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 128;
    }
    else if (useTexture == 3 ){//archer tower
        _Ks = vec4(texture(specularColorSampler, vertex_UV));
        //_Ks = vec4(1.0, 1.0, 1.0, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV));
        // _Kd = vec4(1.0, 1.0, 1.0, 1.0);
        _Ka = vec4(texture(ambientColorSampler, vertex_UV))*_Kd;
        //_Ka = vec4(1.0, 1.0, 1.0, 1.0);
        _Ns = 128;
        
    }

    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;
    //Ia = vec4(0,0,0,0);
    //vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 N = vec3(0,1,0); 
    // model diffuse intensity (Id)
    if (useTexture !=1){
       vec3 N = normalize(vec3(texture(normals_from_texture, vertex_UV).rgb));
    }
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 
    Id = light.Ld * _Kd; 
    //Id = vec4(0.5,1,1,1);

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;
    //Is = vec4(0,0,0,0);

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_worldspace);
    float distance_sq = distance * distance;


    // final fragment color
    
    fragmentColor = vec4(
            Ia + 
            visibility * Id * light.power  +   // Task 4.3 Use visibility
            visibility * Is * light.power );

}