#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 lightVP;
uniform int hp;
uniform int mana=0;


out vec3 hp_modelspace;
out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out vec4 vertex_position_lightspace;

//mage projectiles
uniform int useTexture = 0;
vec3 particle_center_worldspace;
//Homework
//uniform float draw_orb = 0.0f;
void main() {

    // Output position of the vertex
    if (hp==1){
        //the original quad's center is at (0.75, 0.75, 0) so translate it to  (0,0,0). Quad's side size = 0.5
        vec3 modelspace =vec3( (vertexPosition_modelspace.x - 0.75f),vertexPosition_modelspace.y - 0.75f, vertexPosition_modelspace.z - 0.75);
//     
       gl_Position =  P * V  * M  * vec4(0,0,0,1.0);// we transpose the center of the health bar and view from camera space
       gl_Position /= gl_Position.w;// we divide with w to keep it's size independent from the camera
       if (mana==0){
        gl_Position.xy += modelspace.xy * vec2(0.25, 0.05);//we make it a rectangle
       }
       else{
        gl_Position.xy += modelspace.xy * vec2(0.25, 0.1);
       }
       hp_modelspace = vertexPosition_modelspace;
    }
    else if(useTexture==2) {
        vec3 particle_center_worldspace = vec3(M[3][0],M[3][1],M[3][2]);

        vertex_UV = vertexUV;
        vec4 position_viewspace = V * vec4(particle_center_worldspace, 1 );
        position_viewspace.xy += 0.2 * vertexPosition_modelspace.xy;
        gl_Position = P * position_viewspace;
    }
    else{
        gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
        
        // FS
        vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
        vertex_position_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
        vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz; 
        
        vertex_UV = vertexUV;

        // Task 4.2
        vertex_position_lightspace = lightVP * M * vec4(vertexPosition_modelspace, 1.0f);
    }
    


}